name: Lint
on:
  push:
  pull_request:
    branches:
      - master

jobs:
  pre_build:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.0
        with:
          concurrent_skipping: same_content

          # if the change includes documentation changes only, skip.
          paths_ignore: '["docs/**", "**/*.md"]'

          # but do not skip if the triggered event is one of these.
          do_not_skip: '["workflow_dispatch", "schedule"]'
  clang_format:
    runs-on: ubuntu-latest
    needs: pre_build
    if: ${{ needs.pre_build.outputs.should_skip != 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |

          # install the latest stable. the package in official Ubuntu
          # repository is not always up-to-date.
          CLANG_VERSION_STABLE="10"
          CODE_NAME=`lsb_release -sc`
          echo "CLANG_VERSION_STABLE=${CLANG_VERSION_STABLE}" >> ${GITHUB_ENV}

          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/${CODE_NAME}/ llvm-toolchain-${CODE_NAME}-${CLANG_VERSION_STABLE} main"
          sudo apt-get update -qq
          sudo apt-get install clang-format

      - name: Run clang-format
        run: |

          # Use clang-format-diff, a wrapper script to test diff, not a file
          # because we do not want to reformat old code, but new code should
          # follow the style.
          CLANG_FORMAT_DIFF="/usr/share/clang/clang-format-${CLANG_VERSION_STABLE}/clang-format-diff.py"

          # we do not test each commit, but all the changes from when the code
          # is diverged.
          #
          # XXX assuming origin/master is the latest master, which is _often_
          # true in a forked repository, but not always. contributors are
          # responsible for keeping the master up-to-date in their forks.
          # this allows contributors to run this workflow in their forks.
          BASE_REF="origin/master"

          # when the event is `pull_request`, use the target ref to merge
          # into.
          if [ ! -z "${GITHUB_BASE_REF}" ]; then
            BASE_REF="${GITHUB_BASE_REF}"
          fi
          git diff -U0 --no-color ${BASE_REF}...HEAD . | "${CLANG_FORMAT_DIFF}" -i -p1

          # see if there are no changes to be committed, and print suggested
          # changes in colour if there are
          if [ ! -z "$(git status --porcelain)" ]; then
            git status --porcelain
            git diff --color
            exit 1
          fi
  mdl:
    runs-on: ubuntu-latest
    needs: pre_build
    if: ${{ needs.pre_build.outputs.should_skip != 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true

      - name: Run Markdown lint tool
        run: |
          bundle exec mdl -g .
